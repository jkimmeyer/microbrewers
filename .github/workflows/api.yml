name: API Test and Deployment
on: push
env:
  RAILS_ENV: test
  RACK_ENV: test
  NODE_VERSION: "17.1.0"

concurrency:
  group: ci-api-${{ github.ref }}
  cancel-in-progress: true

jobs:
  zeitwerk:
    name: Zeitwerk
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2

      - uses: ruby/setup-ruby@v1
      - run: gem install bundler --no-document
      - run: bundle install
      - run: export $(grep -v '^#' .env.build | xargs) && bin/rails zeitwerk:check

  brakeman:
    name: Brakeman
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1

      - run: gem install brakeman
      - run: brakeman --run-all-checks --interprocedural --no-pager --exit-on-warn --exit-on-error --add-libs-path app

  ruby_audit:
    name: Ruby Audit
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1

      - run: gem install ruby_audit
      - run: bin/ruby-audit

  bundle_audit:
    name: Bundle Audit
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - run: gem install bundler-audit
      - run: bundle audit check --update

  rubocop:
    name: Rubocop
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1

      - run: gem install bundle-only
      - run: bundle-only linting
      - run: rubocop -P

  rspec:
    name: RSpec
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: microbrewers
          POSTGRES_DB: microbrewers_web_test
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432

     # Steps to run the build and test
    # --------------------------------------
    steps:
    - name: checkout-repo
      uses: actions/checkout@v2

    # setup Ruby & bundle install with cache
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true # Automatically runs bundle install and caches the gems

    - uses: zweitag/github-actions/global-variables@master
      with:
        file: '.env.test'

    # before_install
    - run: gem install bundler --no-document

    # before_script
    - name: Setup test database
      run: bin/rails db:test:prepare
      env:
        DATABASE_URL: postgresql://microbrewers:password@localhost/

    - name: Rspec
      run: bin/rspec spec
      env:
        DATABASE_URL: postgresql://microbrewers:password@localhost/

  build:
    runs-on: ubuntu-latest
    needs: [rspec, rubocop, zeitwerk, brakeman]
    outputs:
      app_env: ${{ steps.meta.outputs.app_env }}
      github_sha: ${{ steps.github_sha.outputs.github_sha }}
      digest: ${{ steps.build_app.outputs.digest }}
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/staging' || github.event_name == 'schedule'
    steps:
      - name: "Set up meta"
        id: meta
        run: |
          if [ "$GITHUB_REF" == "refs/heads/staging" ]; then
            APP_ENV=staging
          elif [ "$GITHUB_REF" == "refs/heads/production" ]; then
            APP_ENV=production
          else
          echo "⚠️ Could not determine app env for branch ${{ env.BRANCH_NAME }}"
          exit 1
          fi

          echo "::set-output name=app_env::$APP_ENV"
      - name: "Checkout repository"
        uses: actions/checkout@v2
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to OCIR
        uses: docker/login-action@v1
        with:
          registry: fra.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_PASSWORD }}
      - name: Build and push app
        id: build_app
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
              GIT_REV=${{ github.sha }}`
          push: true
          tags: |
              fra.ocir.io/${{ secrets.OCI_NAMESPACE }}/microbrewers-${{ steps.meta.outputs.app_env }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          no-cache: ${{ github.event_name == 'schedule' }}

      - name: Set output
        id: github_sha
        run: |
          echo "::set-output name=github_sha::${{ github.sha }}"

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/staging'

    steps:
      - name: "Install kubectl"
        uses: azure/setup-kubectl@v2.0
        id: install

      - name: 'Write OCI Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_CONFIG_USER}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_CONFIG_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_CONFIG_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_CONFIG_TENANCY}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_CONFIG_KEY_FILE}}" >> ~/.oci/key.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Generate kubeconfig'
        run: |
          mkdir -p $HOME/.kube
          oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.eu-frankfurt-1.aaaaaaaa6fliwddct6rq6fyvb754olxtae56bqcnrhok7wlw2c7zzwlrmtsa --file $HOME/.kube/config --region eu-frankfurt-1 --token-version 2.0.0  --kube-endpoint PUBLIC_ENDPOINT
          export KUBECONFIG=$HOME/.kube/config

      - name: "Summarize Config"
        run: |
          echo "App env: ${{ needs.build.outputs.app_env }}"
          echo "Github Sha: ${{ needs.build.outputs.github_sha }}"
          echo "Digest: ${{ needs.build.outputs.digest }}"

      - name: "Rollout new image"
        run: |
          kubectl set image deployments/microbrewers-deployment microbrewers=fra.ocir.io/${{ secrets.OCI_NAMESPACE }}/microbrewers-${{ needs.build.outputs.app_env }}:${{ needs.build.outputs.github_sha }}@${{ needs.build.outputs.digest }}

      - name: "Check deployment"
        timeout-minutes: 4
        run: |
          until kubectl rollout status deployment/microbrewers-deployment | grep 'deployment "microbrewers-deployment" successfully rolled out'
          do
            echo "Deployment not finished, retry in 5 seconds"
            sleep 5
          done
