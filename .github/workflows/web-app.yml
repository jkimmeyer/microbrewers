name: Web App Test and Deployment
on: push
env:
  NODE_VERSION: "17.1.0"
  NODE_ENV: "test"
defaults:
  run:
    working-directory: ./frontend

concurrency:
  group: ci-web-${{ github.ref }}
  cancel-in-progress: true

jobs:
  yarn_stylelint:
    name: Yarn Stylelint
    runs-on: ubuntu-latest

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run: export PATH="$HOME/.yarn/bin:$PATH"

      - run: yarn --frozen-lockfile
      - run: yarn stylelint

  yarn_eslint:
    name: Yarn Eslint
    runs-on: ubuntu-18.04

    steps:
      - name: checkout-repo
        uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run: export PATH="$HOME/.yarn/bin:$PATH"

      - run: yarn --frozen-lockfile
      - run: yarn eslint --max-warnings=0

  test:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          working-directory: frontend
          install-command: yarn --frozen-lockfile --silent
          build: yarn build
          start: yarn preview
          config: baseUrl=http://localhost:4173
          wait-on: 'http://localhost:4173'


  build:
    runs-on: ubuntu-latest
    needs: [test, yarn_stylelint, yarn_eslint]
    outputs:
      app_env: ${{ steps.meta.outputs.app_env }}
      github_sha: ${{ steps.github_sha.outputs.github_sha }}
      digest: ${{ steps.build_app.outputs.digest }}
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/staging' || github.event_name == 'schedule'
    steps:
      - name: "Set up meta"
        id: meta
        run: |
          if [ "$GITHUB_REF" == "refs/heads/staging" ]; then
            APP_ENV=staging
          elif [ "$GITHUB_REF" == "refs/heads/production" ]; then
            APP_ENV=production
          else
          echo "⚠️ Could not determine app env for branch ${{ env.BRANCH_NAME }}"
          exit 1
          fi

          echo "::set-output name=app_env::$APP_ENV"

      - name: "Checkout repository"
        uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name:
        run: |
          yarn install --frozen-lockfile

      - name: Vite Build
        run: |
          vite build --mode production

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to OCIR
        uses: docker/login-action@v1
        with:
          registry: fra.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_PASSWORD }}
      - name: Build and push app
        id: build_app
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
              GIT_REV=${{ github.sha }}`
          push: true
          tags: |
              fra.ocir.io/${{ secrets.OCI_NAMESPACE }}/microbrewers-web-${{ steps.meta.outputs.app_env }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          no-cache: ${{ github.event_name == 'schedule' }}

      - name: Set output
        id: github_sha
        run: |
          echo "::set-output name=github_sha::${{ github.sha }}"

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/staging'

    steps:
      - name: "Install kubectl"
        uses: azure/setup-kubectl@v2.0
        id: install

      - name: 'Write OCI Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_CONFIG_USER}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_CONFIG_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_CONFIG_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_CONFIG_TENANCY}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_CONFIG_KEY_FILE}}" >> ~/.oci/key.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Generate kubeconfig'
        run: |
          mkdir -p $HOME/.kube
          oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.eu-frankfurt-1.aaaaaaaa6fliwddct6rq6fyvb754olxtae56bqcnrhok7wlw2c7zzwlrmtsa --file $HOME/.kube/config --region eu-frankfurt-1 --token-version 2.0.0  --kube-endpoint PUBLIC_ENDPOINT
          export KUBECONFIG=$HOME/.kube/config

      - name: "Summarize Config"
        run: |
          echo "App env: ${{ needs.build.outputs.app_env }}"
          echo "Github Sha: ${{ needs.build.outputs.github_sha }}"
          echo "Digest: ${{ needs.build.outputs.digest }}"

      - name: "Rollout new image"
        run: |
          kubectl set image deployments/microbrewers-web-deployment microbrewers-web=fra.ocir.io/${{ secrets.OCI_NAMESPACE }}/microbrewers-web-${{ needs.build.outputs.app_env }}:${{ needs.build.outputs.github_sha }}@${{ needs.build.outputs.digest }}

      - name: "Check deployment"
        timeout-minutes: 4
        run: |
          until kubectl rollout status deployment/microbrewers-web-deployment | grep 'deployment "microbrewers-web-deployment" successfully rolled out'
          do
            echo "Deployment not finished, retry in 5 seconds"
            sleep 5
          done
